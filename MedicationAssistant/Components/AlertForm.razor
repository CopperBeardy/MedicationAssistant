@using Microsoft.AspNetCore.Components.Forms;

<h3>@Mode Alert</h3>

@if(Alert != null)
{
<EditForm Model="@Alert"
          OnInvalidSubmit="(async () => await HandleSubmitAsync(false))"
          OnValidSubmit="(async () => await HandleSubmitAsync(true))">
    <DataAnnotationsValidator />
    <ValidationSummary />
    <h2>Alert</h2>
    <p>

        <label>
            <h5><i class="fas fa-pills"></i> Alert Time </h5>
            <InputDate @bind-Value="Alert.Time" />
            <ConcurrencyField Model="@Alert"
                              DbModel="@DbAlert"
                              Property="obj => obj?.Time">
            </ConcurrencyField>
        </label>
    </p>
    <p>

        <label>
            <h5><i class="fas fa-prescription-bottle-alt"></i> Alert For  </h5>
            <InputSelect @bind-Value="Alert.Prescription.Medicine.Name" >
                
            </InputSelect>
            <ConcurrencyField Model="@Alert"
                              DbModel="@DbAlert"
                              Property="obj => obj?.Prescription.Medicine.Name">
            </ConcurrencyField>
        </label>    
    
    </p>
  


    <br />
    <button disabled="@Busy" class="btn btn-warning"
            @onclick="CancelAsync">
        Cancel
    </button>&nbsp;
    <button disabled="@Busy" type="submit"
            class="btn btn-primary">
        Submit
    </button>
</EditForm>
 }

    @code {
    [Parameter]
        public EventCallback<bool> ValidationResult { get; set; }


        [Parameter]
        public EventCallback CancelRequest { get; set; }


        [Parameter]
        public bool IsAdd { get; set; }


        [Parameter]
        public AlertModel Alert { get; set; }


        [Parameter]
        public AlertModel DbAlert { get; set; }

        /// <summary>
        /// Prevent multiple asynchronous operations at the same time.
        /// </summary>
        [Parameter]
        public bool Busy { get; set; }

      @*  [Parameter]
        public List<PrescriptionModel> Presciptions {get;set;}

        protected async override Task OnInitializedAsync()
        {
           Presciptions = await GetPresciptions();
        }

         private async Task<List<Prescription>> GetPresciptions() {

            throw Exception();
         };*@
       
     
        /// <summary>
        /// Mode.
        /// </summary>
        private string Mode => IsAdd ? "Add" : "Edit";

        private Task CancelAsync()
        {
            return CancelRequest.InvokeAsync(null);
        }
      
        private Task HandleSubmitAsync(bool isValid)
        {
            return ValidationResult.InvokeAsync(isValid);
        }
    }