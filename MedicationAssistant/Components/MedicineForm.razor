@using Microsoft.AspNetCore.Components.Forms;

<h3>@Mode Medicine</h3>

@if(Medicine != null)
{
<EditForm Model="@Medicine"
          OnInvalidSubmit="(async () => await HandleSubmitAsync(false))"
          OnValidSubmit="(async () => await HandleSubmitAsync(true))">
    <DataAnnotationsValidator />
    <ValidationSummary />
    <h2>Medicine</h2>
    <p>

        <label>
            <h5><i class="fas fa-pills"></i> Medicine  </h5>
            <InputText @bind-Value="@Medicine.Name" />
            <ConcurrencyField Model="@DbMedicine"
                              DbModel="@DbMedicine"
                              Property="obj => obj?.Name">
            </ConcurrencyField>
        </label>
    </p>
    <p>

        <label>
            <h5><i class="fas fa-prescription-bottle-alt"></i> Dosage  </h5>
            <InputNumber @bind-Value="@Medicine.Dosage" />
            <ConcurrencyField Model="@DbMedicine"
                              DbModel="@DbMedicine"
                              Property="obj => obj?.Dosage">
            </ConcurrencyField>
        </label>    
        <label>
            <h5>Dosage Unit</h5>
            <InputSelect @bind-Value="@Medicine.DosageUnit">
                @foreach (var item in DosageUnit)
                    {
                    <option>@item</option>
                    }
            </InputSelect>
            <ConcurrencyField Model="@DbMedicine"
                              DbModel="@DbMedicine"
                              Property="obj => obj?.DosageUnit">
            </ConcurrencyField>
        </label>
    </p>
    <p>

        <label>
            <h5><i class="fas fa-book-medical"></i> Description  </h5>
            <InputTextArea @bind-Value="@Medicine.Description" />
            <ConcurrencyField Model="@DbMedicine"
                              DbModel="@DbMedicine"
                              Property="obj => obj?.Description">
            </ConcurrencyField>
        </label>
    </p>
    <p>

        <label>
            <h5><i class="fas fa-file-medical"></i> Directions of Use  </h5>
            <InputTextArea @bind-Value="@Medicine.UseDirections" />
            <ConcurrencyField Model="@DbMedicine"
                              DbModel="@DbMedicine"
                              Property="obj => obj?.UseDirections">
            </ConcurrencyField>
        </label>
    </p>


    <br />
    <button disabled="@Busy" class="btn btn-warning"
            @onclick="CancelAsync">
        Cancel
    </button>&nbsp;
    <button disabled="@Busy" type="submit"
            class="btn btn-primary">
        Submit
    </button>
</EditForm>
 }

    @code {
    [Parameter]
        public EventCallback<bool> ValidationResult { get; set; }


        [Parameter]
        public EventCallback CancelRequest { get; set; }


        [Parameter]
        public bool IsAdd { get; set; }


        [Parameter]
        public Medicine Medicine { get; set; }


        [Parameter]
        public Medicine DbMedicine { get; set; }

        /// <summary>
        /// Prevent multiple asynchronous operations at the same time.
        /// </summary>
        [Parameter]
        public bool Busy { get; set; }

        [Parameter]
        public List<string> DosageUnit {get;set;}

        protected override void OnInitialized()
        {
           DosageUnit = GetDosageUnit();
        }
        
        private List<string> GetDosageUnit() =>
               Enum.GetNames(typeof(DosageUnit)).ToList();
      
     
        /// <summary>
        /// Mode.
        /// </summary>
        private string Mode => IsAdd ? "Add" : "Edit";

        private Task CancelAsync()
        {
            return CancelRequest.InvokeAsync(null);
        }
      
        private Task HandleSubmitAsync(bool isValid)
        {
            return ValidationResult.InvokeAsync(isValid);
        }
    }