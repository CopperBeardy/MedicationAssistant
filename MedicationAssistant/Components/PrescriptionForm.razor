@using Microsoft.AspNetCore.Components.Forms;

<h3>@Mode Prescription</h3>

@if(Prescription != null)
{
<EditForm Model="@Prescription"
          OnInvalidSubmit="(async () => await HandleSubmitAsync(false))"
          OnValidSubmit="(async () => await HandleSubmitAsync(true))">
    <DataAnnotationsValidator />
    <ValidationSummary />
    <h2>Prescription</h2>
    <p>
        
        <label>
           <h5><i class="fas fa-pills"></i> Medicine  </h5>
            <InputText @bind-Value="@Prescription.Medicine.Name" />
            <ConcurrencyField Model="@DbPrescription"
            DbModel="@DbPrescription"
             Property="obj => obj?.Medicine.Name">            
        </ConcurrencyField>
      </label>
    </p>
      <p>
        
        <label>
           <h5><i class="fas fa-prescription-bottle"></i> Quantity  </h5>
            <InputNumber @bind-Value="@Prescription.Quantity" />
            <ConcurrencyField Model="@DbPrescription"
            DbModel="@DbPrescription"
             Property="obj => obj?.Quantity">            
        </ConcurrencyField>
      </label>
    </p>  
      <p>
          <label>
             <h5><i class="fas fa-clock"></i> Frequency unit  </h5>
             Every  <InputNumber @bind-Value="@Prescription.FrequencyUnit" />
              <ConcurrencyField Model="@DbPrescription"
              DbModel="@DbPrescription"
               Property="obj => obj?.FrequencyUnit">
          </ConcurrencyField>
        </label>
          <label>
              <h5><i class="fas fa-ruler-vertical"></i> Frequency  </h5>
              <InputSelect @bind-Value="@Prescription.Frequency">
                  @foreach (var item in Frequency)
                      {
                      <option>@item</option>
                      }
              </InputSelect>
              <ConcurrencyField Model="@DbPrescription"
                                DbModel="@DbPrescription"
                                Property="obj => obj?.Frequency">
              </ConcurrencyField>
          </label>
      </p>
      


         <br />
        <button disabled="@Busy" class="btn btn-warning"
                @onclick="CancelAsync">
            Cancel
        </button>&nbsp;
        <button disabled="@Busy" type="submit"
                class="btn btn-primary">
            Submit
        </button>
 </EditForm>
 }

    @code {
    [Parameter]
        public EventCallback<bool> ValidationResult { get; set; }


        [Parameter]
        public EventCallback CancelRequest { get; set; }


        [Parameter]
        public bool IsAdd { get; set; }


        [Parameter]
        public PrescriptionModel Prescription { get; set; }


        [Parameter]
        public PrescriptionModel DbPrescription { get; set; }

        /// <summary>
        /// Prevent multiple asynchronous operations at the same time.
        /// </summary>
        [Parameter]
        public bool Busy { get; set; }

        [Parameter]
        public List<string> Frequency {get;set;}

        protected override void OnInitialized()
        {
            Frequency = GetFrequency();
        }
        
        private List<string> GetFrequency() =>
               Enum.GetNames(typeof(Frequency)).ToList();
      
     
        /// <summary>
        /// Mode.
        /// </summary>
        private string Mode => IsAdd ? "Add" : "Edit";

        private Task CancelAsync()
        {
            return CancelRequest.InvokeAsync(null);
        }
      
        private Task HandleSubmitAsync(bool isValid)
        {
            return ValidationResult.InvokeAsync(isValid);
        }
    }