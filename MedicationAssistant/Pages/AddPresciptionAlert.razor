@page "/addPrescriptionAlert"

@inject IDbContextFactory<MedicationAssistantDBContext> dbFactory
@inject NavigationManager Nav
@inject IPageHelper PageHelper

@*create a form component for add and edit to share  *@
@if (PrescriptionAlert != null)
{
    <PrescriptionAlertForm  Busy="@Busy"
                  PrescriptionAlert="@PrescriptionAlert"
                  IsAdd="true"
                  CancelRequest="Cancel"
                  ValidationResult="@(async (success) => await ValidationResultAsync(success))" />
}
@if (Success)
{
    <br />
    <div class="Alert Alert-success">The PrescriptionAlert was successfully added.</div>
}
@if (Error)
{
    <br />
    <div class="Alert Alert-danger">Failed to update the PrescriptionAlert (@ErrorMessage).</div>
}


@code {
    /// <summary>
    /// PrescriptionAlert being added 
    /// </summary>
    private PrescriptionAlert PrescriptionAlert { get; set; }


     /// <summary>
    /// Avoid concurrent requests
    /// </summary>
    private bool Busy;

    /// <summary>
    /// Notification form was successfully validated
    /// </summary>
    private bool Success;


    /// <summary>
    /// An error occurred in the update
    /// </summary>
    private bool Error;

    /// <summary>
    /// A concurrency error needs resolution
    /// </summary>
    private bool ConcurrencyError;

    /// <summary>
    /// Error message
    /// </summary>
    private string ErrorMessage = string.Empty;

    /// <summary>
    /// Start it up
    /// </summary>
    /// <returns>Task</returns>
    protected override Task OnInitializedAsync()
    {
        return base.OnInitializedAsync();
    }

    public async Task ValidationResultAsync(bool success)
    {
        if (Busy)
        {
            return;
        }

        if (!success)
        {
            Success = false;
            Error = false;
            return;
        }
        Busy = true;

        using var context = dbFactory.CreateDbContext();
        context.Set<PrescriptionAlert>().Add(PrescriptionAlert);

        try
        {
            await context.SaveChangesAsync();
            Success = true;
            Error = false;
            Busy = false;

        }
        catch (Exception ex)
        {
            Success = false;
            Error = true;
            ErrorMessage = ex.Message;
            Busy = false;
        }
    }

    /// <summary>
    /// Back to list.
    /// </summary>
    private void Cancel()
    {
        Nav.NavigateTo($"/{PageHelper.Page}");
    }
}