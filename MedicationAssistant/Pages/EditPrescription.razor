@page "/editpre/{PrescriptionId:int}"

@using Microsoft.EntityFrameworkCore;
@implements IDisposable

@inject IDbContextFactory<MedicationAssistantDBContext> DbFactory
@inject NavigationManager Nav
@inject IPageHelper PageHelper
@inject EditSuccess EditSuccessState

@if (Prescription == null && !Busy)
{
<p>Could not find Prescription with id @PrescriptionId</p>
 }
else
{
    <PrescriptionForm Busy="@Busy"
                Prescription="@Prescription"
                DbPrescription="@DbPrescription"
                IsAdd="false"
                CancelRequest="Cancel"
                ValidationResult="@(async (success) => await ValidationResultAsync(success))"/>

}
@if (ConcurrencyError)
{
<br />
                <div class="alert alert-danger">
                    <p>
                        The Prescription details have changed since it was last loaded. The updated fields are highlighted in the form.
                        Please choose an option:
                    </p>
                    <p><b>Cancel</b> to lose your changes and keep the database version.</p>
                    <p><b>Submit</b> to force an update with your version.</p>
                </div>}
@if (Error)
{
<br />
                <div class="alert alert-danger">Failed to update the Prescription (@ErrorMessage).</div>}

@code { /// <summary>
    /// Id of Prescription to edit
    /// </summary>
    [Parameter]
    public int PrescriptionId { get; set; }

    /// <summary>
    /// The <see cref="PrescriptionAssistantDBContext"/> for database access.
    /// </summary>
    private MedicationAssistantDBContext Context { get; set; }

    /// <summary>
    /// Prescription being edited
    /// </summary>
    private Prescription Prescription { get; set; }

    /// <summary>
    /// Database version when concurrency issues exist
    /// </summary>
    private Prescription DbPrescription { get; set; }

    /// <summary>
    /// Avoid concurrent requests
    /// </summary>
    private bool Busy;

    /// <summary>
    /// An error occurred in the update
    /// </summary>
    private bool Error;

    /// <summary>
    /// A concurrency error needs resolution
    /// </summary>
    private bool ConcurrencyError;

    /// <summary>
    /// Error message
    /// </summary>
    private string ErrorMessage = string.Empty;

    /// <summary>
    /// Start it up
    /// </summary>
    /// <returns>Task</returns>


    protected override async Task OnInitializedAsync()
    {
        Busy = true;

        try
        {
            Context = DbFactory.CreateDbContext();
            Prescription = await Context.Prescriptions
                .SingleOrDefaultAsync(c => c.Id == PrescriptionId);
        }
        finally
        {
            Busy = false;
        }

        await base.OnInitializedAsync();
    }


    /// <summary>
    /// Result of form validation
    /// </summary>
    /// <param name="success">Success when model is valid</param>
    /// <returns>Task</returns>
    private async Task ValidationResultAsync(bool success)
    {
        if (Busy)
        {
            return;
        }

        if (!success)
        {
            // still need to edit model
            Error = false;
            ConcurrencyError = false;
            return;
        }

        Busy = true; // async
        try
        {
            await Context.SaveChangesAsync();
            EditSuccessState.Success = true;
            // go to view to see the record
            Nav.NavigateTo($"/viewpre/{Prescription.Id}");
        }
        catch (DbUpdateConcurrencyException dbex)
        {
            EditSuccessState.Success = false;

            // concurrency issues!
            ConcurrencyError = true;

            // get values from database
            var dbValues = dbex.Entries[0].GetDatabaseValues();

            if (dbValues == null)
            {
                // deleted - show contact not found
                Nav.NavigateTo($"/viewpre/{Prescription.Id}");
                return;
            }

            // bind to show labels on form
            DbPrescription = (Prescription)dbValues.ToObject();

            // move to original so second submit works (unless there is another concurrent edit)
            dbex.Entries[0].OriginalValues.SetValues(dbValues);
            Error = false;
            Busy = false;
        }
        catch (Exception ex)
        {
            EditSuccessState.Success = false;
            // unknown exception
            Error = true;
            ErrorMessage = ex.Message;
            Busy = false;
        }
    }

    /// <summary>
    /// Bail out!
    /// </summary>
    private void Cancel()
    {
        Busy = true;
        Nav.NavigateTo($"/{PageHelper.Page}");
    }

    /// <summary>
    /// Implement <see cref="IDisposable"/>.
    /// </summary>

    public void Dispose()
    {
        Context.Dispose();
    } }
