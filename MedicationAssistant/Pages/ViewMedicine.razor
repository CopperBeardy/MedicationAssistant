@page "/viewmed/{MedicineId:int}"

@using Microsoft.EntityFrameworkCore

@inject IDbContextFactory<MedicationAssistantDBContext> DbFactory
@inject IPageHelper PageHelper
@inject EditSuccess EditSuccessState

@if (NotFound && !Loading)
{
<div class="alert alert-warning">The Medicine with that id doesn't exist.</div> }
else
{
@if (Medicine == null || Loading)
{
<div class="alert alert-info">Loading...</div> }
else
{
<h1>@Medicine.Name</h1>
   <br />
   @if (EditSuccess)
   {
       <div class="alert alert-success">Successfully updated the Medicine.</div>
   }
   @if (!Deleted)
   {
       <a class="btn btn-primary" href="edit/@Medicine.Id" title="Edit">Edit</a><span>&nbsp;</span>
        @if (!ShowConfirmation)
        {
            <button class="btn btn-danger" @onclick="@(() => { ShowConfirmation = true; EditSuccess = false; })">Delete</button>
        }
        else
        {
            <br />
            <br />
            <DeletePrompt Confirmation="@(async result => await ConfirmAsync(result))" />
         } 
   }
   else
   {
       <div class="btn btn-danger">🚫 This item has been deleted.</div>
   }
}
}

@code { /// <summary>
    /// Tracking of asynchronous calls.
    /// </summary>
    private bool Loading;

    /// <summary>
    /// Id from route of Medicine.
    /// </summary>
    [Parameter]
    public int MedicineId { get; set; }

    /// <summary>
    /// Navigation check.
    /// </summary>
    private int _lastMedicineId;

    /// <summary>
    /// True with redirect from successful edit.
    /// </summary>
    [Parameter]
    public bool EditSuccess { get; set; }

    /// <summary>
    /// Medicine entity.
    /// </summary>
    private MedicineModel Medicine { get; set; }

    /// <summary>
    /// Set to true when not found.
    /// </summary>
    private bool NotFound = false;

    /// <summary>
    /// Set to true when delete is requested.
    /// </summary>
    private bool ShowConfirmation = false;

    /// <summary>
    /// Set to true when delete is successful
    /// </summary>
    private bool Deleted = false;

    /// <summary>
    /// Navigated
    /// </summary>
    /// <returns>Task</returns>
    protected override async Task OnParametersSetAsync()
    {
        if (_lastMedicineId != MedicineId)
        {
            EditSuccess = EditSuccessState.Success;
            EditSuccessState.Success = false;
            _lastMedicineId = MedicineId;
            await LoadMedicineAsync();
        }
        await base.OnParametersSetAsync();
    }

    /// <summary>
    /// Confirm deletion
    /// </summary>
    /// <param name="result">True when user confirmed</param>
    /// <returns>Task</returns>
    private async Task ConfirmAsync(bool result)
    {
        if (result)
        {
            await DeleteAsync();
        }
        else
        {
            ShowConfirmation = false;
            EditSuccess = false;
        }
    }

    /// <summary>
    /// Loads the Medicine
    /// </summary>
    /// <returns>Task</returns>
    private async Task LoadMedicineAsync()
    {
        if (Loading)
        {
            return; //avoid concurrent requests
        }

        NotFound = false;
        Medicine = null;

        Loading = true;

        using var context = DbFactory.CreateDbContext();

        Medicine = await context.Medicines.AsNoTracking()
            .SingleOrDefaultAsync(c => c.Id == MedicineId);

        if (Medicine == null)
        {
            NotFound = true;
        }

        Loading = false;
    }

    /// <summary>
    /// Deletes the Medicine.
    /// </summary>
    /// <returns>Task</returns>
    private async Task DeleteAsync()
    {
        if (Loading)
        {
            return; // avoid concurrent requests
        }

        Loading = true;
        using var context = DbFactory.CreateDbContext();
        var Medicine = await context.Medicines
        .SingleOrDefaultAsync(c => c.Id == MedicineId);
        if (Medicine != null)
        {
            context.Medicines.Remove(Medicine);
            await context.SaveChangesAsync();
            Loading = false;
            Deleted = true;
        }
        else
        {
            Loading = false;
            // show not found
            await LoadMedicineAsync();
        }
    } }
