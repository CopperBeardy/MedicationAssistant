@page "/Medicines"

@inject  IDbContextFactory<MedicationAssistantDBContext> dbFactory;

<h3>Medicines</h3>

<DxDataGrid Data="@Medicines"
            ShowFilterRow="true"
            RowRemovingAsync="@((dataItem) => OnRowRemoving(dataItem))"
            RowUpdatingAsync="@((updatingDataItem, newValues) => OnRowUpdating(updatingDataItem, (Dictionary<string,object>)newValues))"
            RowInsertingAsync="@((newValues) => OnRowInserting((Dictionary<string,object>)newValues))"
            InitNewRow="@OnInitNewRow"
            ShowPager="true"
            PagerPageSizeSelectorVisible="true"
            PagerAllDataRowsItemVisible="true"
            PagerAllowedPageSizes=@(new int[] {2,10,20,40})
            PagerNavigationMode=PagerNavigationMode.InputBox
            CssClass="mw-1100">

    <DxDataGridCommandColumn Width="150px" />
    <DxDataGridColumn AllowFilter="true" Field="@nameof(Medicine.Name)"/>
    <DxDataGridSpinEditColumn Field="@nameof(Medicine.Dosage)" Width="100px" />
    <DxDataGridComboBoxColumn Data="@DosageUnits" Field="@nameof(Medicine.DosageUnit)" Width="150px">
        <EditTemplate>
            @{
                var editingContext = (CellEditContext)context;
                var unit = Enum.GetName(typeof(DosageUnit),(editingContext.GetEditorValue(nameof(Medicine.DosageUnit))));
                      
            }
            
            <DxComboBox Data="@DosageUnits"
                        NullText ="Select a Dosage Unit"
                        Value="@unit"
                        ValueChanged="((string newCellValue) => {
                                    editingContext.OnChanged((Enum.Parse(typeof(DosageUnit),newCellValue)));
                                })">
                
            </DxComboBox>
        </EditTemplate>
    </DxDataGridComboBoxColumn>
   
    <DxDataGridColumn Field="@nameof(Medicine.Description)" />
    <DxDataGridColumn Field="@nameof(Medicine.UseDirections)" />
</DxDataGrid>




@code {

    protected IMedicineService MedicineService { get; set; }
    IEnumerable<Medicine> Medicines = Enumerable.Empty<Medicine>();
    IEnumerable<string> DosageUnits = Enumerable.Empty<string>();

    protected override async Task OnInitializedAsync()
    {
        MedicineService = new MedicineService();
        Medicines = await MedicineService.GetMedicines(dbFactory.CreateDbContext());
     
        DosageUnits = ConvertUnits();
    }

    private IEnumerable<string> ConvertUnits(){
        List<string> tempDU = new List<string>();
        foreach(var d in Enum.GetValues(typeof(DosageUnit)))
        {
            tempDU.Add(Enum.GetName(typeof(DosageUnit),d));
        }

        return tempDU;
    }

    async Task OnRowRemoving(Medicine Medicine)
    {
        await MedicineService.RemoveMedicine(dbFactory.CreateDbContext(), Medicine);
        Medicines = Medicines.Where(m => m != Medicine);
        await InvokeAsync(() => StateHasChanged());
    }

    async Task OnRowUpdating(Medicine Medicine, Dictionary<string, object> newValues)
    {
        await MedicineService.UpdateMedicine(dbFactory.CreateDbContext(), Medicine, newValues);
    }

    async Task OnRowInserting(Dictionary<string, object> values)
    {
        var newMed = new Medicine();
        await MedicineService.InsertMedicine(dbFactory.CreateDbContext(), newMed, values);
        Medicines = (new Medicine[] { newMed }).Concat(Medicines);
        await InvokeAsync(() => StateHasChanged());
    }

    Task OnInitNewRow(Dictionary<string, object> values)
    {

        values.Add("DosageUnit",1);
        return Task.CompletedTask;
    }
}
